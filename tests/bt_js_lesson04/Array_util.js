// Arry util
let str ="hello K14 class";
let arr =["Nhung", "Nhi", "T√†i", "H·∫±ng", "Quang"];
// map(): t·∫°o ra 1 m·∫£ng m·ªõi b·∫±ng c√°ch √°p 1 h√†m l√™n t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng g·ªëc, d√πng khi b·∫°n bi·∫øn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠ th√†nh gi√° tr·ªã m·ªõi, map s·∫Ω duy·ªát qua t·ª´ng ph·∫ßn t·ª≠.
//H√†m .map() ph·∫£i nh·∫≠n m·ªôt gi√° tr·ªã tr·∫£ v·ªÅ t·ª´ m·ªói l·∫ßn g·ªçi callback, ƒë·ªÉ t·∫°o ra m·ªôt ph·∫ßn t·ª≠ t∆∞∆°ng ·ª©ng trong m·∫£ng m·ªõi, n√™n ph·∫£i c√≥ return.
//Kh√¥ng c√≥ return, th√¨ callback kh√¥ng tr·∫£ l·∫°i gi√° tr·ªã n√†o ‚Üí .map() m·∫∑c ƒë·ªãnh hi·ªÉu l√† undefined.
//.map() d√πng ƒë·ªÉ t·∫°o ra m·ªôt m·∫£ng m·ªõi d·ª±a tr√™n m·∫£ng c≈© ‚Üí n√™n n√≥ c·∫ßn b·∫°n return t·ª´ng ph·∫ßn t·ª≠ m·ªõi.
//C√≥ d·∫•u {} trong arrow function ‚Üí ph·∫£i c√≥ return
//Kh√¥ng c√≥ {} ‚Üí JavaScript s·∫Ω ng·∫ßm hi·ªÉu return, return ng·∫ßm
//vd: c√≥ return
const arr7 = [1, 2, 3];
const newArr = arr7.map(x => {
  return x * 2; // c·∫ßn return ·ªü ƒë√¢y, kh√¥ng c√≥ return gi√° tr·ªã tr·∫£ v·ªÅ s·∫Ω l√† undefined
});

//vd: kh√¥ng c√≥ return
console.log(newArr); // üëâ [2, 4, 6]
let upperName = arr.map(nameValue => nameValue.toLocaleUpperCase());
console.log(upperName);

// filter(): t·∫°o 1 m·∫£ng m·ªõi, ch·ªâ bao g·ªìm ph·∫ßn t·ª≠ tho·∫£ m√£n ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, d√πng khi b·∫°n ch·ªçn ph·∫ßn t·ª≠ theo ƒëi·ªÅu ki·ªán ƒë√∫ng/sai.
// filter() ch·ªâ gi·ªØ l·∫°i ph·∫ßn t·ª≠ n·∫øu gi√° tr·ªã tr·∫£ v·ªÅ l√† true. N·∫øu kh√¥ng c√≥ return, m·∫∑c ƒë·ªãnh l√† undefined, n√™n m·ªçi ph·∫ßn t·ª≠ s·∫Ω b·ªã lo·∫°i b·ªè.
let hue = [1,2,3,4,5,6];
let evenNumber = hue.filter(num => num%2 ===0);
console.log(evenNumber);

// find(): tr·∫£ v·ªÅ gi√° tr·ªã ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n m√† tho·∫£ m√£n ƒëi·ªÅu ki·ªán trong m·∫£ng, n·∫øu kh√¥ng c√≥ ph·∫ßn t·ª´ tho·∫£ m√£n th√¨ tr·∫£ v·ªÅ undefined
let thom = [8,7,6,5,4,3,2,1];
let evenNumber2= thom.find(num => num%2===0);
console.log(evenNumber2);

// reduce(): √°p d·ª•ng t·ª´ng ph·∫ßn t·ª´ trong m·∫£ng v√† tr·∫£ v·ªÅ 1 k·∫øt qu·∫£ duy nh·∫•t, d√πng ƒë·ªÉ t√≠nh to√°n, gom nh√≥m, t·ªïng h·ª£p d·ªØ li·ªáu trong m·∫£ng
// √°p d·ª•ng 1 h√†m l√™n t·ª´ng ph·∫ßn t·ª≠ (t·ª´ tr√°i qua ph·∫£i) ƒë·ªÉ tr·∫£ v·ªÅ 1 gi√° tr·ªã duy nh·∫•t
let sum = thom.reduce((total, num) => total + num,0);// total: bi·∫øn nh·∫≠n gi√° tr·ªã duy nh·∫•t, num: ph·∫ßn t·ª≠ c·ªßa m·∫£ng, 0 l√† gi√° tr·ªã kh·ªüi t·∫°o cho bi·∫øn totals 
console.log(sum);

// some(): check c√≥ t·ªìn t·∫°i ph·∫ßn t·ª≠ n√†o trong m·∫£ng tho·∫£ m√£n ƒëk kh√¥ng, c√≥ th√¨ tr·∫£ v·ªÅ true, kh√¥ng th√¨ tr·∫£ v·ªÅ false
let checkNum = thom.some(num => num>=6);
console.log(checkNum);

// every(): check to√†n b·ªô ph·∫ßn t·ª≠ trong m·∫£ng xem c√≥ tho·∫£ m√£n ƒëk kh√¥ng, c√≥ th√¨ tr·∫£ v·ªÅ true, kh√¥ng th√¨ tr·∫£ v·ªÅ false
let checkNum2 = thom.every(num => num %2 ===0);
console.log(checkNum2);

// push(): th√™m 1 ho·∫∑c nhi·ªÅu ph·∫ßn t·ª´ v√†o ph√≠a cu·ªëi m·∫£ng v√† tr·∫£ v·ªÅ ƒë·ªô d√†i c·ªßa m·∫£ng m·ªõi
thom.push(1,3);
console.log(thom);
// tr·∫£ v√® ƒë·ªô d√†i m·∫£ng
console.log(thom.push(1,3));

// shift(): lo·∫°i b·ªè ph·∫ßn t·ª´ ƒë·∫ßu ti√™n c·ªßa m·∫£ng v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫•y, c√≥ thay ƒë·ªïi m·∫£ng
console.log(thom.shift());
console.log(thom);

// sort(): s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ trong m·∫£ng theo t·ª´ ƒëi·ªÉn Unicode, chuy·ªÉn t·ª´ng ph·∫ßn t·ª≠ v·ªÅ d·∫°ng chu·ªói, sau ƒë√≥ so s√°nh chu·ªói r·ªìi m·ªõi s·∫Øp x·∫øp
console.log(thom.sort());

// pop(): xo√° v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa m·∫£ng, l√†m thay ƒë·ªïi m·∫£ng g·ªëc
let arr5 = [1,2,3];
let last = arr5.pop();
console.log(arr5);//[1,2]
console.log(last);//3

// unshift(): th√™m 1 ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ v√†o ƒë·∫ßu m·∫£ng, tr·∫£ v·ªÅ ƒë·ªô d√†i m·ªõi c·ªßa m·∫£ng, l√†m thay ƒë·ªïi m·∫£ng g·ªëc
let arr6 = [1,2,3];
arr.unshift(0); //[0,1,2,3]
console.log(arr6);

// slice(): ƒë∆∞·ª£c d√πng ƒë·ªÉ tr√≠ch xu·∫•t 1 ph·∫ßn c·ªßa m·∫£ng ho·∫∑c chu·ªói, m√† kh√¥ng l√†m thay ƒë·ªïi gi√° tr·ªã g·ªëc
array.slice(start, end);//start: v·ªã tr·ªã b·∫Øt ƒë·∫ßu , end: v·ªã tr√≠ k·∫øt th√∫c(kh√¥ng bao g·ªìm ph·∫ßn t·ª≠ ·ªü ch·ªâ s·ªë n√†y)-c√≥ th·ªÉ b·ªè qua
// n·∫øu gi√° tr·ªã end b·ªã b·ªè qua s·∫Ω c·∫Øt t·ªõi cu·ªëi m·∫£ng / chu·ªói
const fruits1 = ["T√°o", "Cam", "Chu·ªëi", "Xo√†i", "·ªîi"];
const result12 = fruits.slice(1, 4); // L·∫•y t·ª´ v·ªã tr√≠ 1 ƒë·∫øn tr∆∞·ªõc 4
console.log(result12);       // ["Cam", "Chu·ªëi", "Xo√†i"]
console.log(fruits1); // m·∫£ng g·ªëc kh√¥ng ƒë·ªïi
// Ch·ªâ s·ªë √¢m: slice(-2): ch·ªâ s·ªë √¢m trong slice c√≥ nghƒ©a l√† t√≠nh t·ª´ cu·ªëi m·∫£ng ho·∫∑c chu·ªói v·ªÅ ƒë·∫ßu
const arr4 = [10, 20, 30, 40, 50];
const lastTwo = arr4.slice(-2); // L·∫•y 2 ph·∫ßn t·ª≠ cu·ªëi
console.log(lastTwo); // [40, 50]
const middle = arr4.slice(-4, -1); // T√≠nh t·ª´ ph·∫ßn t·ª≠ th·ª© 4 t·ª´ cu·ªëi ƒë·∫øn ph·∫ßn t·ª≠ th·ª© 1 t·ª´ cu·ªëi (kh√¥ng bao g·ªìm -1)
console.log(middle); // [20, 30, 40]

// match(): l√† h√†m d√πng ƒë·ªÉ t√¨m ki·∫øm chu·ªói con ph√π h·ª£p v·ªõi regex(bi·ªÉu th·ª©c ch√≠nh quy)
//D√πng ƒë·ªÉ l·ªçc ho·∫∑c x·ª≠ l√Ω ri√™ng c√°c k√Ω t·ª± l√† ch·ªØ c√°i, b·ªè qua s·ªë, kho·∫£ng tr·∫Øng, k√Ω hi·ªáu.
console.log("A".match(/[a-zA-Z]/));  // ‚úÖ ['A']
console.log("1".match(/[a-zA-Z]/));  // ‚ùå null

// split(): s·ª≠ d·ª•ng ƒë·ªÉ chia 1 chu·ªói th√†nh 1 m·∫£ng c√°c chu·ªói con
const str3 = "Xin ch√†o th·∫ø gi·ªõi";
const result = str3.split(" ");
console.log(result); // ["Xin", "ch√†o", "th·∫ø", "gi·ªõi"]

// reverse(): s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± c√°c ph·∫ßn t·ª≠ trong 1 m·∫£ng
const numbers = [1, 2, 3, 4, 5];
numbers.reverse();
console.log(numbers); // Output: [5, 4, 3, 2, 1]

// join(): s·ª≠ d·ª•ng ƒë·ªÉ n·ªëi c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng th√†nh 1 chu·ªói string v√† ngƒÉn c√°ch nhau b·ªüi d·∫•u ph√¢n c√°ch t∆∞∆°ng ·ª©ng
const fruits = ['Apple', 'Banana', 'Cherry'];
const result1 = fruits.join(' - ');
console.log(result1); // Output: "Apple - Banana - Cherry"

// indexOf: t√¨m v·ªã tr√≠ xu·∫•t hi·ªán ƒë·∫ßu ti√™n c·ªßa 1 gi√° tr·ªã trong chu·ªói ho·∫∑c m·∫£ng
// V·ªõi m·∫£ng
const arr1 = [1, 2, 3, 2, 1];
console.log(arr1.indexOf(2)); // K·∫øt qu·∫£: 1
// V·ªõi chu·ªói
const str5 = "Hello, world!";
console.log(str5.indexOf("o")); // K·∫øt qu·∫£: 4

// lastIndexOf: t√¨m v·ªã tr√≠ xu·∫•t hi·ªán cu·ªëi c√πng c·ªßa 1 gi√° tr·ªã trong chu·ªói ho·∫∑c m·∫£ng
// V·ªõi m·∫£ng
const ar3 = [1, 2, 3, 2, 1];
console.log(ar3.lastIndexOf(2)); // K·∫øt qu·∫£: 3
//C·∫£ indexOf v√† lastIndexOf s·∫Ω tr·∫£ v·ªÅ -1 n·∫øu kh√¥ng t√¨m th·∫•y.

// Object.values(): l·∫•y ra t·∫•t c·∫£ c√°c gi√° tr·ªã trong object
const obj = {
  a: 10,
  b: 20,
  c: 'hello',
}; 
const obj2 = Object.values(obj);
console.log(obj2);

// Object.keys(): l·∫•y ra t√™n thu·ªôc t√≠nh keys trong object
const person = {
  name: "John",
  age: 30,
  country: "USA"
};
const keys = Object.keys(person);
console.log(keys); 

// Typeof: ƒë∆∞·ª£c d√πng ƒë·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu (data type) c·ªßa m·ªôt gi√° tr·ªã, c√∫ ph√°p: typeof(<gi√°_tr·ªã>)
console.log(typeof 123);           // "number"
console.log(typeof "Hello");       // "string"
console.log(typeof true);          // "boolean"

